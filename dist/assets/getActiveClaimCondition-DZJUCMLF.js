import{r as a}from"./index-DillEupA.js";const y="0xd637ed59",d=[],T=[{name:"startTimestamp",type:"uint256",internalType:"uint256"},{name:"maxClaimableSupply",type:"uint256",internalType:"uint256"},{name:"supplyClaimed",type:"uint256",internalType:"uint256"},{name:"quantityLimitPerWallet",type:"uint256",internalType:"uint256"},{name:"merkleRoot",type:"bytes32",internalType:"bytes32"},{name:"pricePerToken",type:"uint256",internalType:"uint256"},{name:"currency",type:"address",internalType:"address"},{name:"metadata",type:"string",internalType:"string"}];async function C(t){return a({contract:t.contract,method:[y,d,T],params:[]})}const P="0xc68907de",f=[],S=[{type:"uint256"}];async function N(t){return a({contract:t.contract,method:[P,f,S],params:[]})}const _="0x6f8934f4",g=[{type:"uint256",name:"_conditionId"}],F=[{type:"tuple",name:"condition",components:[{type:"uint256",name:"startTimestamp"},{type:"uint256",name:"maxClaimableSupply"},{type:"uint256",name:"supplyClaimed"},{type:"uint256",name:"quantityLimitPerWallet"},{type:"bytes32",name:"merkleRoot"},{type:"uint256",name:"pricePerToken"},{type:"address",name:"currency"},{type:"string",name:"metadata"}]}];async function U(t){return a({contract:t.contract,method:[_,g,F],params:[t.conditionId]})}async function E(t){const i=async()=>{const e=await N(t);return U({...t,conditionId:e})},r=async()=>{const[e,o,m,c,s,l,p,u]=await C(t);return{startTimestamp:e,maxClaimableSupply:o,supplyClaimed:m,quantityLimitPerWallet:c,merkleRoot:s,pricePerToken:l,currency:p,metadata:u}},n=(await Promise.allSettled([i(),r()])).find(e=>e.status==="fulfilled");if((n==null?void 0:n.status)==="fulfilled")return n.value;throw new Error("Claim condition not found")}export{E as getActiveClaimCondition};
